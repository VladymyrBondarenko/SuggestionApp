@page "/Create"
@attribute [Authorize]
@using SuggestionAppUI.Components
@using SuggestionAppUI.Models
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager

<h1>Make Suggestion</h1>

<div>
    <div>
        <div>
            <button @onclick="ClosePage"></button>
        </div>
        @if(suggestion is not null)
        {
            <EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div>
                <label for="suggestion-text">Suggestion</label>
                <div>Focus on the topic of technology you want to learn about.</div>
                <InputText id="suggestion-text" @bind-Value="suggestion.Suggestion" />
            </div>
            <div>
                <label for="category">Category</label>
                <div>Choose one category.</div>
                <div>
                    <MyInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
                        @foreach(var c in categories)
                        {
                            <div>
                                <InputRadio Value="@c.Id" id="@c.Id"></InputRadio>
                                <label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
                            </div>
                        }
                    </MyInputRadioGroup>
                </div>
            </div>
            <div>
                <label for="description">Description</label>
                <div>Briefly describe your suggestion.</div>
                <InputTextArea id="description" @bind-Value="suggestion.Description" />
            </div>
            <div>
                <button type="submit">Suggest</button>
            </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private CreateSuggestionModel suggestion = new();
    private List<CategoryModel> categories;
    private UserModel loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        loggedInUser = await authProvider.GetUserModelFromAuth(userData);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }

    private async void CreateSuggestion()
    {
        var s = new SuggestionModel
            {
                Suggestion = suggestion.Suggestion,
                SuggestionDescription = suggestion.Description,
                Author = new BasicUserModel(loggedInUser),
                Category = categories.FirstOrDefault(i => i.Id == suggestion.CategoryId)
            };
        if(s.Category is null)
        {
            suggestion.CategoryId = string.Empty;
            return;
        }

        await suggestionData.CreateSuggestion(s);
        suggestion = new();
        ClosePage();
    }
}