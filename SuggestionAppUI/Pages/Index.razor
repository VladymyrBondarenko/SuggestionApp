@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

<h1 class="page-heading text-uppercase mb-4">Training Suggestion</h1>
<div>
    <button class="suggest-btn btn btn-outline-light btn-lg text-uppercase" @onclick="OpenCreate">Suggest</button>
</div>

<div class="row">
    <div class="suggestion-count col col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">New</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div class="search-box col-md-3 col-xl-3">
        <input class="form-control rounded-control" type="text" placeholder = "Search" 
            aria-label = "Search box" @oninput="((txt) => OnSearchInput((string)txt.Value))" value="@searchText" />
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if(suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div class="suggestion-entry">
                    <div class="@GetVoteClass(s)" @onclick="(() => VoteUp(s))">
                        <div class="text-uppercase">@GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top" style="font-size: 3rem;"></span>
                        <div class="text-uppercase">@GetUpVoteBottomText(s)</div>
                    </div>
                    <div class="suggestion-entry-text-title">
                        <div class="suggestion-entry-text" @onclick="(() => OpenDetails(s))">
                            @s.Suggestion
                        </div>
                        <div>
                            <div class="suggestion-entry-text-category" @onclick="(() => OpenDetails(s))">
                                @s.Category?.CategoryName
                            </div>
                        </div>
                    </div>
                    <div class="suggestion-entry-status @GetSuggestionStatusClass(s)">
                        <div class="suggestion-entry-status-text">
                            @s.SuggestionStatus?.StatusName
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3">
        @if(categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Category</span>
                <div class="@GetSelectedCategoryClass()" @onclick="(() => OnCategoryClick())">All</div>
                @foreach(var c in categories)
                {
                    <div class="@GetSelectedCategoryClass(c.CategoryName)" @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
        @if(statuses is not null)
        {
            <div>
                <span>Status</span>
                <div class="@GetSelectedStatusClass()" @onclick="(() => OnStatusClick())">All</div>
                @foreach(var s in statuses)
                {
                    <div class="@GetSelectedStatusClass(s.StatusName)" @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
                }
            </div>
        } 
    </div>
</div>

@code{
    private UserModel loggedInUser;
    private List<StatusModel> statuses;
    private List<CategoryModel> categories;
    private List<SuggestionModel> suggestions;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = string.Empty;
    private bool isSortedByNew = true;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {

        var authState = await authProvider.GetAuthenticationStateAsync();

        var authUserClaims = authState.User.Claims;
        var objectId = authUserClaims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        if (!string.IsNullOrWhiteSpace(objectId))
        {
            loggedInUser = await userData.GetUserByObjectIdentifierAsync(objectId) ?? new();

            string firstName = authUserClaims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authUserClaims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authUserClaims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authUserClaims.FirstOrDefault(c => c.Type.Contains("emails"))?.Value;

            var isAuthDataChanged = false;
            if (!objectId.Equals(loggedInUser.ObjectIdentifier))
            {
                loggedInUser.ObjectIdentifier = objectId;
                isAuthDataChanged = true;
            }
            if (!firstName.Equals(loggedInUser.FirstName))
            {
                loggedInUser.FirstName = firstName;
                isAuthDataChanged = true;
            }
            if (!lastName.Equals(loggedInUser.LastName))
            {
                loggedInUser.LastName = lastName;
                isAuthDataChanged = true;
            }
            if (!displayName.Equals(loggedInUser.DisplayName))
            {
                loggedInUser.DisplayName = displayName;
                isAuthDataChanged = true;
            }
            if (!email.Equals(loggedInUser.EmailAddress))
            {
                loggedInUser.EmailAddress = email;
                isAuthDataChanged = true;
            }

            if (isAuthDataChanged)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                }
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResult = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResult.Success ? stringResult.Value : "All";

        stringResult = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResult.Success ? stringResult.Value : "All";

        stringResult = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResult.Success ? stringResult.Value : string.Empty;

        var boolResult = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResult.Success ? boolResult.Value : true;
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestion();

        if(selectedCategory != "All")
        {
            output = output.Where(i => i.Category?.CategoryName == selectedCategory).ToList();
        }

        if(selectedStatus != "All")
        {
            output = output.Where(i => i.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if (!string.IsNullOrWhiteSpace(searchText))
        {
            output = output.Where(i => 
                i.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) ||
                i.SuggestionDescription.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)
            ).ToList();
        }

        if (isSortedByNew)
        {
            output = output
                .OrderByDescending(i => i.DateCreated)
                .ToList();
        }
        else
        {
            output = output
                .OrderByDescending(i => i.UserVotes.Count)
                .ThenByDescending(i => i.DateCreated)
                .ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if(loggedInUser is not null)
        {
            if(suggestion.Author.Id == loggedInUser.Id)
            {
                return;
            }

            if (!suggestion.UserVotes.Add(loggedInUser.Id))
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);

            if (!isSortedByNew)
            {
                suggestions = suggestions
                    .OrderByDescending(i => i.UserVotes.Count)
                    .OrderByDescending(i => i.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        var topText = "ClickTo";
        if (suggestion.UserVotes?.Count > 0)
        {
            topText = suggestion.UserVotes.Count.ToString("00");
        }
        else if(suggestion.Author.Id == loggedInUser?.Id)
        {
            topText = "Awaiting";
        }
        return topText;
    }

    private string GetUpVoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }

    private void OpenCreate()
    {
        if(loggedInUser is not null)
        {
            navManager.NavigateTo($"/Create");
        }
        else
        {
            navManager.NavigateTo("MicrosoftIdentity/Account/SignIn");
        }
    }

    private string SortedByNewClass(bool isNew)
    {
        return isNew == isSortedByNew ? "sort-selected" : string.Empty;
    }

    private string GetVoteClass(SuggestionModel suggestion)
    {
        var resultClass = "suggestion-entry-not-voted";
        if(suggestion.UserVotes is null || !suggestion.UserVotes.Any())
        {
            resultClass = "suggestion-entry-no-votes";
        }
        else if (suggestion.UserVotes.Contains(loggedInUser?.Id))
        {
            resultClass = "suggestion-entry-voted";
        }
        return resultClass;
    }

    private string GetSuggestionStatusClass(SuggestionModel suggestion)
    {
        const string suggestionDefaultClass = "suggestion-entry-status-none";
        if(suggestion is null || suggestion?.SuggestionStatus == null)
        {
            return suggestionDefaultClass;
        }

        var output = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-entry-status-completed",
            "Watching" => "suggestion-entry-status-watching",
            "Upcoming" => "suggestion-entry-status-upcoming",
            "Dismissed" => "suggestion-entry-status-dismissed",
            _ => suggestionDefaultClass
        };

        return output;
    }

    private string GetSelectedCategoryClass(string category = "All")
    {
        if(category == selectedCategory)
        {
            return "selected-category";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetSelectedStatusClass(string status = "Completed")
    {
        if(status == selectedStatus)
        {
            return "selected-status";
        }
        else
        {
            return string.Empty;
        }
    }
}