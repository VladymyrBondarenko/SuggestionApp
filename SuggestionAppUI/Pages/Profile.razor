@page "/Profile"
@attribute [Authorize()]
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject ISuggestionData suggestionData
@inject NavigationManager navManager

<h1>My Profile</h1>

<div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>

<div>
    <h2>My Account</h2>
    <p>
        <a href="MicrosoftIdentity/Account/EditProfile">Edit My Profile</a>
    </p>
</div>

@if (approved?.Count > 0)
{
    <div>
        <h2>Approved Suggestions</h2>
        <p>These are your suggestions that are currently active.</p>

        @foreach(var s in approved)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToShortDateString()</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.SuggestionDescription</p>
            @if(s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (archived?.Count > 0)
{
    <div>
        <h2>Archived Suggestions</h2>
        <p>These are your suggestions that are currently active.</p>

        @foreach(var s in archived)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToShortDateString()</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.SuggestionDescription</p>
            @if(s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (pending?.Count > 0)
{
    <div>
        <h2>Pending Suggestions</h2>
        <p>These are your suggestions that are currently active.</p>

        @foreach (var s in pending)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToShortDateString()</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.SuggestionDescription</p>
            @if (s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}


@if (rejected?.Count > 0)
{
    <div>
        <h2>Rejected Suggestions</h2>
        <p>These are your suggestions that are currently active.</p>

        @foreach(var s in rejected)
        {
            <hr />
            <div>
                @s.Suggestion
            </div>
            <p>@s.DateCreated.ToShortDateString()</p>
            <p>Total Votes: @s.UserVotes.Count</p>
            <p>@s.Category.CategoryName</p>
            <p>@s.SuggestionDescription</p>
            @if(s.SuggestionStatus is not null)
            {
                <div>
                    @s.SuggestionStatus.StatusName
                </div>
                <p>
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submissions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> rejected;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> archived;

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserModelFromAuth(userData);
        var userSuggestions = await suggestionData.GetUserSuggestions(loggedInUser.Id);

        if(userSuggestions is not null && loggedInUser is not null)
        {
            submissions = userSuggestions.OrderByDescending(i => i.DateCreated).ToList();
            approved = userSuggestions.Where(i => i.ApprovedForRelease && !i.Archived && !i.Rejected).ToList();
            rejected = userSuggestions.Where(i => i.Rejected).ToList();
            pending = userSuggestions.Where(i => !i.Rejected && !i.ApprovedForRelease && !i.Archived).ToList();
            archived = userSuggestions.Where(i => !i.Rejected && i.Archived).ToList();
        }
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}